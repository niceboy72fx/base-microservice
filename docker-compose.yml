version: "3.9"

services:
    redis:
      image: redis:6.2.16
      container_name: redis
      hostname: redis
      ports:
        - '6370:6379'
      environment:
        - ALLOW_EMPTY_PASSWORD=yes
        - REDIS_DISABLE_COMMANDS=FLUSHDB;FLUSHALL
      networks:
        - default
      healthcheck:
        test: [ "CMD", "redis-cli", "ping" ]
        interval: 3s
        timeout: 20s
        retries: 8

    database:
      image: postgres:17.0-alpine3.20
      container_name: database
      environment:
        PGUSER: postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
        POSTGRES_DB: base_postgres
        PGDATA: /data/postgres
      ports:
        - '5435:5432'
      volumes:
        - postgres:/data/postgres
        - ./db/initdb.sql:/docker-entrypoint-initdb.d/init.sql
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U postgres" ]
        interval: 3s
        timeout: 20s
        retries: 8
      networks:
        - default

    elastic-search:
      image: elasticsearch:7.14.1
      container_name: elasticsearch
      restart: always
      ports:
        - "9200:9200"
      environment:
        - discovery.type=single-node

    logstash:
      image: docker.elastic.co/logstash/logstash:7.14.1
      volumes:
        - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      ports:
        - "5000:5000"
      depends_on:
        - elastic-search
      
    kibana:
      image: docker.elastic.co/kibana/kibana:8.12.2
      ports:
        - "5601:5601"
      depends_on:
        - elastic-search
        
    zookeeper:
      image: confluentinc/cp-zookeeper:latest
      container_name: zookeeper
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      ports:
        - '22181:2181'
    
    kafka:
      image: confluentinc/cp-kafka:latest
      container_name: kafka
      depends_on:
        - zookeeper
      ports:
        - '29092:29092'
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    prometheus:
      image: prom/prometheus:latest
      container_name: prometheus
      volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml
      ports:
        - "9090:9090"

    grafana:
      image: grafana/grafana:latest
      container_name: grafana
      depends_on:
        - prometheus
      ports:
        - "3000:3000"
      volumes:
        - grafana-storage:/var/lib/grafana
      environment:
        - GF_SECURITY_ADMIN_USER=admin
        - GF_SECURITY_ADMIN_PASSWORD=admin
      restart: always

    mongoDb:
      image: mongo:8.0.10-noble
      container_name: mongo-database
      ports:
        - "27017:27017"
      environment:
        MONGO_INITDB_ROOT_USERNAME: mongo
        MONGO_INITDB_ROOT_PASSWORD: 1181080029
        MONGO_INITDB_DATABASE: orderDB
      # volumes:
      #   - db:/data/db

   #API GATEWAY
#    api-gateway:
#      container_name: api-gateway
#      build:
#        context: ./api-gateway
#        dockerfile: Dockerfile
#      environment:
#        HOST_NAME: host.docker.internal
#      ports:
#          - '4953:4953'
#      networks:
#          - default

  # authentication's service #####################################################################
#    auth-service:
#      container_name: authentication-service
#      build:
#        context: ./authentication-service
#        dockerfile: Dockerfile
#      environment:
#        HOST_NAME: host.docker.internal
#      ports:
#        - '8083:8083'
#      networks:
#        - default
#      depends_on:
#        database:
#          condition: service_healthy
#        redis:
#          condition: service_healthy

## ACCOUNT SERVICE
#
#  account-service:
#    container_name: account-service
#    build:
#      context: ./account-service
#      dockerfile: Dockerfile
#    environment:
#      HOST_NAME: host.docker.internal
#    ports:
#      - '8081:8081'
#    networks:
#      - default

# PRODUCT SERVICE
#  product-service:
#    container_name: product-service
#    build:
#      context: ./product-service
#      dockerfile: Dockerfilepro
#    environment:
#      HOST_NAME: host.docker.internal
#    ports:
#      - '8083:8083'
#    networks:
#      - default

#  order-service:
#    container_name: order-service
#    build:
#      context: ./order-service
#      dockerfile: Dockerfile
#    environment:
#      HOST_NAME: host.docker.internal
#    ports:
#      - '8084:8084'
#    networks:
#      - default

## PAYMENT SERVICE
#  payment-service:
#    container_name: payment-service
#    build:
#      context: ./payment-service
#      dockerfile: Dockerfile
#    ports:
#      - '8082:8082'
#    networks:
#      - default
#
#  # PAYMENT SERVICE
#  inventory-service:
#    container_name: inventory-service
#    build:
#      context: ./inventory-service
#      dockerfile: Dockerfile
#    environment:
#      HOST_NAME: host.docker.internal
#    ports:
#      - '8086:8086'
#    networks:
#      - default
## MAIL SERVICE
#  mail-service:
#    container_name: mail-service
#    build:
#      context: ./mail-service
#      dockerfile: Dockerfile
#    environment:
#      HOST_NAME: host.docker.internal
#    ports:
#      - '8085:8085'
#    networks:
#      - default
#
## NOTIFICATION SERVICE
#  notification-service:
#    container_name: notification-service
#    build:
#      context: ./notification-service
#      dockerfile: Dockerfile
#    environment:
#      HOST_NAME: host.docker.internal
#    ports:
#      - '8087:8087'
#    networks:
#      - default
#
## BATCH SERVICE
#  batch-service:
#    container_name: batch-service
#    build:
#      context: ./batch-service
#      dockerfile: Dockerfile
#    ports:
#      - '8084:8084'
#    networks:
#      - default

networks:
  default:
    name: api-network

volumes:
  postgres:
  grafana-storage:
